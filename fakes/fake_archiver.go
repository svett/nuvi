// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"

	"github.com/svett/nuvi"
)

type FakeArchiver struct {
	UnzipStub        func(reader io.Reader) (io.ReadCloser, error)
	unzipMutex       sync.RWMutex
	unzipArgsForCall []struct {
		reader io.Reader
	}
	unzipReturns struct {
		result1 io.ReadCloser
		result2 error
	}
}

func (fake *FakeArchiver) Unzip(reader io.Reader) (io.ReadCloser, error) {
	fake.unzipMutex.Lock()
	fake.unzipArgsForCall = append(fake.unzipArgsForCall, struct {
		reader io.Reader
	}{reader})
	fake.unzipMutex.Unlock()
	if fake.UnzipStub != nil {
		return fake.UnzipStub(reader)
	} else {
		return fake.unzipReturns.result1, fake.unzipReturns.result2
	}
}

func (fake *FakeArchiver) UnzipCallCount() int {
	fake.unzipMutex.RLock()
	defer fake.unzipMutex.RUnlock()
	return len(fake.unzipArgsForCall)
}

func (fake *FakeArchiver) UnzipArgsForCall(i int) io.Reader {
	fake.unzipMutex.RLock()
	defer fake.unzipMutex.RUnlock()
	return fake.unzipArgsForCall[i].reader
}

func (fake *FakeArchiver) UnzipReturns(result1 io.ReadCloser, result2 error) {
	fake.UnzipStub = nil
	fake.unzipReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

var _ nuvi.Archiver = new(FakeArchiver)
