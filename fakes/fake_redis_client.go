// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"gopkg.in/redis.v4"

	"github.com/svett/nuvi"
)

type FakeRedisClient struct {
	LPushStub        func(key string, values ...interface{}) *redis.IntCmd
	lPushMutex       sync.RWMutex
	lPushArgsForCall []struct {
		key    string
		values []interface{}
	}
	lPushReturns struct {
		result1 *redis.IntCmd
	}
	LIndexStub        func(key string, index int64) *redis.StringCmd
	lIndexMutex       sync.RWMutex
	lIndexArgsForCall []struct {
		key   string
		index int64
	}
	lIndexReturns struct {
		result1 *redis.StringCmd
	}
	LLenStub        func(key string) *redis.IntCmd
	lLenMutex       sync.RWMutex
	lLenArgsForCall []struct {
		key string
	}
	lLenReturns struct {
		result1 *redis.IntCmd
	}
}

func (fake *FakeRedisClient) LPush(key string, values ...interface{}) *redis.IntCmd {
	fake.lPushMutex.Lock()
	fake.lPushArgsForCall = append(fake.lPushArgsForCall, struct {
		key    string
		values []interface{}
	}{key, values})
	fake.lPushMutex.Unlock()
	if fake.LPushStub != nil {
		return fake.LPushStub(key, values...)
	} else {
		return fake.lPushReturns.result1
	}
}

func (fake *FakeRedisClient) LPushCallCount() int {
	fake.lPushMutex.RLock()
	defer fake.lPushMutex.RUnlock()
	return len(fake.lPushArgsForCall)
}

func (fake *FakeRedisClient) LPushArgsForCall(i int) (string, []interface{}) {
	fake.lPushMutex.RLock()
	defer fake.lPushMutex.RUnlock()
	return fake.lPushArgsForCall[i].key, fake.lPushArgsForCall[i].values
}

func (fake *FakeRedisClient) LPushReturns(result1 *redis.IntCmd) {
	fake.LPushStub = nil
	fake.lPushReturns = struct {
		result1 *redis.IntCmd
	}{result1}
}

func (fake *FakeRedisClient) LIndex(key string, index int64) *redis.StringCmd {
	fake.lIndexMutex.Lock()
	fake.lIndexArgsForCall = append(fake.lIndexArgsForCall, struct {
		key   string
		index int64
	}{key, index})
	fake.lIndexMutex.Unlock()
	if fake.LIndexStub != nil {
		return fake.LIndexStub(key, index)
	} else {
		return fake.lIndexReturns.result1
	}
}

func (fake *FakeRedisClient) LIndexCallCount() int {
	fake.lIndexMutex.RLock()
	defer fake.lIndexMutex.RUnlock()
	return len(fake.lIndexArgsForCall)
}

func (fake *FakeRedisClient) LIndexArgsForCall(i int) (string, int64) {
	fake.lIndexMutex.RLock()
	defer fake.lIndexMutex.RUnlock()
	return fake.lIndexArgsForCall[i].key, fake.lIndexArgsForCall[i].index
}

func (fake *FakeRedisClient) LIndexReturns(result1 *redis.StringCmd) {
	fake.LIndexStub = nil
	fake.lIndexReturns = struct {
		result1 *redis.StringCmd
	}{result1}
}

func (fake *FakeRedisClient) LLen(key string) *redis.IntCmd {
	fake.lLenMutex.Lock()
	fake.lLenArgsForCall = append(fake.lLenArgsForCall, struct {
		key string
	}{key})
	fake.lLenMutex.Unlock()
	if fake.LLenStub != nil {
		return fake.LLenStub(key)
	} else {
		return fake.lLenReturns.result1
	}
}

func (fake *FakeRedisClient) LLenCallCount() int {
	fake.lLenMutex.RLock()
	defer fake.lLenMutex.RUnlock()
	return len(fake.lLenArgsForCall)
}

func (fake *FakeRedisClient) LLenArgsForCall(i int) string {
	fake.lLenMutex.RLock()
	defer fake.lLenMutex.RUnlock()
	return fake.lLenArgsForCall[i].key
}

func (fake *FakeRedisClient) LLenReturns(result1 *redis.IntCmd) {
	fake.LLenStub = nil
	fake.lLenReturns = struct {
		result1 *redis.IntCmd
	}{result1}
}

var _ nuvi.RedisClient = new(FakeRedisClient)
