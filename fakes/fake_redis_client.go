// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"gopkg.in/redis.v4"

	"github.com/svett/nuvi"
)

type FakeRedisClient struct {
	LPushStub        func(key string, values ...interface{}) *redis.IntCmd
	lPushMutex       sync.RWMutex
	lPushArgsForCall []struct {
		key    string
		values []interface{}
	}
	lPushReturns struct {
		result1 *redis.IntCmd
	}
}

func (fake *FakeRedisClient) LPush(key string, values ...interface{}) *redis.IntCmd {
	fake.lPushMutex.Lock()
	fake.lPushArgsForCall = append(fake.lPushArgsForCall, struct {
		key    string
		values []interface{}
	}{key, values})
	fake.lPushMutex.Unlock()
	if fake.LPushStub != nil {
		return fake.LPushStub(key, values...)
	} else {
		return fake.lPushReturns.result1
	}
}

func (fake *FakeRedisClient) LPushCallCount() int {
	fake.lPushMutex.RLock()
	defer fake.lPushMutex.RUnlock()
	return len(fake.lPushArgsForCall)
}

func (fake *FakeRedisClient) LPushArgsForCall(i int) (string, []interface{}) {
	fake.lPushMutex.RLock()
	defer fake.lPushMutex.RUnlock()
	return fake.lPushArgsForCall[i].key, fake.lPushArgsForCall[i].values
}

func (fake *FakeRedisClient) LPushReturns(result1 *redis.IntCmd) {
	fake.LPushStub = nil
	fake.lPushReturns = struct {
		result1 *redis.IntCmd
	}{result1}
}

var _ nuvi.RedisClient = new(FakeRedisClient)
